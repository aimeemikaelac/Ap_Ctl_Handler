// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.1
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "ap_ctl_handler.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic ap_ctl_handler::ap_const_logic_1 = sc_dt::Log_1;
const bool ap_ctl_handler::ap_true = true;
const sc_logic ap_ctl_handler::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> ap_ctl_handler::ap_const_lv3_4 = "100";
const sc_lv<3> ap_ctl_handler::ap_const_lv3_0 = "000";
const sc_lv<3> ap_ctl_handler::ap_const_lv3_6 = "110";
const sc_lv<3> ap_ctl_handler::ap_const_lv3_2 = "10";
const sc_lv<32> ap_ctl_handler::ap_const_lv32_1 = "1";
const sc_lv<32> ap_ctl_handler::ap_const_lv32_2 = "10";
const sc_lv<1> ap_ctl_handler::ap_const_lv1_1 = "1";

ap_ctl_handler::ap_ctl_handler(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_idle);

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_start_out);
    sensitive << ( ap_start );
    sensitive << ( p_04_1_fu_120_p3 );

    SC_METHOD(thread_current_status_V_1_fu_94_p0);
    sensitive << ( ap_done_in );

    SC_METHOD(thread_current_status_V_1_fu_94_p3);
    sensitive << ( current_status_V_1_fu_94_p0 );
    sensitive << ( current_status_V_fu_86_p3 );
    sensitive << ( p_s_fu_78_p3 );

    SC_METHOD(thread_current_status_V_2_fu_112_p3);
    sensitive << ( tmp_1_fu_102_p4 );

    SC_METHOD(thread_current_status_V_fu_86_p0);
    sensitive << ( ap_ready_in );

    SC_METHOD(thread_current_status_V_fu_86_p3);
    sensitive << ( current_status_V_fu_86_p0 );

    SC_METHOD(thread_p_04_1_fu_120_p0);
    sensitive << ( ap_idle_in );

    SC_METHOD(thread_p_04_1_fu_120_p3);
    sensitive << ( current_status_V_1_fu_94_p3 );
    sensitive << ( p_04_1_fu_120_p0 );
    sensitive << ( current_status_V_2_fu_112_p3 );

    SC_METHOD(thread_p_s_fu_78_p0);
    sensitive << ( ap_ready_in );

    SC_METHOD(thread_p_s_fu_78_p3);
    sensitive << ( p_s_fu_78_p0 );

    SC_METHOD(thread_tmp_1_fu_102_p4);
    sensitive << ( current_status_V_1_fu_94_p3 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_virtual_clock.pos() );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "ap_ctl_handler_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, ap_start_enable, "(port)ap_start_enable");
    sc_trace(mVcdFile, ap_start_out, "(port)ap_start_out");
    sc_trace(mVcdFile, ap_ready_in, "(port)ap_ready_in");
    sc_trace(mVcdFile, ap_done_in, "(port)ap_done_in");
    sc_trace(mVcdFile, ap_idle_in, "(port)ap_idle_in");
    sc_trace(mVcdFile, ap_status_out_V, "(port)ap_status_out_V");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, p_s_fu_78_p0, "p_s_fu_78_p0");
    sc_trace(mVcdFile, current_status_V_fu_86_p0, "current_status_V_fu_86_p0");
    sc_trace(mVcdFile, current_status_V_1_fu_94_p0, "current_status_V_1_fu_94_p0");
    sc_trace(mVcdFile, current_status_V_fu_86_p3, "current_status_V_fu_86_p3");
    sc_trace(mVcdFile, p_s_fu_78_p3, "p_s_fu_78_p3");
    sc_trace(mVcdFile, current_status_V_1_fu_94_p3, "current_status_V_1_fu_94_p3");
    sc_trace(mVcdFile, tmp_1_fu_102_p4, "tmp_1_fu_102_p4");
    sc_trace(mVcdFile, p_04_1_fu_120_p0, "p_04_1_fu_120_p0");
    sc_trace(mVcdFile, current_status_V_2_fu_112_p3, "current_status_V_2_fu_112_p3");
    sc_trace(mVcdFile, p_04_1_fu_120_p3, "p_04_1_fu_120_p3");
#endif

    }
    mHdltvinHandle.open("ap_ctl_handler.hdltvin.dat");
    mHdltvoutHandle.open("ap_ctl_handler.hdltvout.dat");
}

ap_ctl_handler::~ap_ctl_handler() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void ap_ctl_handler::thread_ap_done() {
    ap_done = ap_start.read();
}

void ap_ctl_handler::thread_ap_idle() {
    ap_idle = ap_const_logic_1;
}

void ap_ctl_handler::thread_ap_ready() {
    ap_ready = ap_start.read();
}

void ap_ctl_handler::thread_ap_start_out() {
    ap_start_out =  (sc_logic) ((!p_04_1_fu_120_p3.read().is_01() || !ap_const_lv3_0.is_01())? sc_lv<1>(): sc_lv<1>(p_04_1_fu_120_p3.read() != ap_const_lv3_0))[0];
}

void ap_ctl_handler::thread_current_status_V_1_fu_94_p0() {
    current_status_V_1_fu_94_p0 =  (sc_lv<1>) (ap_done_in.read());
}

void ap_ctl_handler::thread_current_status_V_1_fu_94_p3() {
    current_status_V_1_fu_94_p3 = (!current_status_V_1_fu_94_p0.read()[0].is_01())? sc_lv<3>(): ((current_status_V_1_fu_94_p0.read()[0].to_bool())? current_status_V_fu_86_p3.read(): p_s_fu_78_p3.read());
}

void ap_ctl_handler::thread_current_status_V_2_fu_112_p3() {
    current_status_V_2_fu_112_p3 = esl_concat<2,1>(tmp_1_fu_102_p4.read(), ap_const_lv1_1);
}

void ap_ctl_handler::thread_current_status_V_fu_86_p0() {
    current_status_V_fu_86_p0 =  (sc_lv<1>) (ap_ready_in.read());
}

void ap_ctl_handler::thread_current_status_V_fu_86_p3() {
    current_status_V_fu_86_p3 = (!current_status_V_fu_86_p0.read()[0].is_01())? sc_lv<3>(): ((current_status_V_fu_86_p0.read()[0].to_bool())? ap_const_lv3_6: ap_const_lv3_2);
}

void ap_ctl_handler::thread_p_04_1_fu_120_p0() {
    p_04_1_fu_120_p0 =  (sc_lv<1>) (ap_idle_in.read());
}

void ap_ctl_handler::thread_p_04_1_fu_120_p3() {
    p_04_1_fu_120_p3 = (!p_04_1_fu_120_p0.read()[0].is_01())? sc_lv<3>(): ((p_04_1_fu_120_p0.read()[0].to_bool())? current_status_V_2_fu_112_p3.read(): current_status_V_1_fu_94_p3.read());
}

void ap_ctl_handler::thread_p_s_fu_78_p0() {
    p_s_fu_78_p0 =  (sc_lv<1>) (ap_ready_in.read());
}

void ap_ctl_handler::thread_p_s_fu_78_p3() {
    p_s_fu_78_p3 = (!p_s_fu_78_p0.read()[0].is_01())? sc_lv<3>(): ((p_s_fu_78_p0.read()[0].to_bool())? ap_const_lv3_4: ap_const_lv3_0);
}

void ap_ctl_handler::thread_tmp_1_fu_102_p4() {
    tmp_1_fu_102_p4 = current_status_V_1_fu_94_p3.read().range(2, 1);
}

void ap_ctl_handler::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start_enable\" :  \"" << ap_start_enable.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_start_out\" :  \"" << ap_start_out.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_ready_in\" :  \"" << ap_ready_in.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_done_in\" :  \"" << ap_done_in.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_idle_in\" :  \"" << ap_idle_in.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_status_out_V\" :  \"" << ap_status_out_V.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

